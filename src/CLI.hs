{-# LANGUAGE LambdaCase        #-}
{-# LANGUAGE NamedFieldPuns    #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE RecordWildCards   #-}

module CLI
  ( processLockFile
  , readOptions
  ) where

import           CLI.Options
import           Nix         hiding (Options)
import           Nix.TH      (nix)
import           Node2nixHs  (fromPackageLock)
import           NodeEnv     (nodeEnv)
import           PackageLock (PackageLock, loadPackageLock)

processLockFile :: Options -> IO ()
processLockFile options = do
  let Paths {.. } = paths options
  saveResult   packagesFile  =<< readPackageLock packageLockFile
  writeNixExpr compositionFile (composition options)
  unless (noCopyNodeEnv options) (writeNixExpr nodeEnvFile nodeEnv)

readPackageLock :: FilePath -> IO PackageLock
readPackageLock =
  let handleError s =
        die $ "Error while parsing the package-lock.json file: '" <> s <> "'"
   in either handleError pure <=< loadPackageLock

saveResult :: FilePath -> PackageLock -> IO ()
saveResult file = writeNixExpr file. fromPackageLock

writeNixExpr :: FilePath -> NExpr -> IO ()
writeNixExpr file expr =
  let prefix = "# This file has been generated by node2nix-hs 0.0.1. Do not edit!\n\n"
   in writeFile file (prefix ++ show (prettyNix expr))

toNixPackage :: NodeJSVersion -> Text
toNixPackage = \case
  NodeJS16 -> "nodejs-16_x"
  NodeJS18 -> "nodejs-18_x"
  NodeJS20 -> "nodejs-20_x"

composition :: Options -> NExpr
composition Options {..} =
  let nixpkgs = [nix| import <nixpkgs> { inherit system; } |]
      defaultNodePackage = "pkgs" @. toNixPackage nodeJSVersion
      params =
        mkParamSet
          [ ("pkgs"   , Just nixpkgs)
          , ("system" , Just [nix| builtins.currentSystem |])
          , ("nodejs" , Just defaultNodePackage)
          ]

      -- FIXME use callPackage instead
      nodeEnvArgs =
        [nix|
          {
            inherit (pkgs) stdenv lib python2 runCommand writeTextFile writeShellScript;
            inherit pkgs nodejs;
            libtool = if pkgs.stdenv.isDarwin then pkgs.darwin.cctools else null;
          }
        |]

      -- FIXME use callPackage instead
      nodePackagesArgs =
        [nix|
          {
            inherit (pkgs) fetchurl nix-gitignore stdenv lib fetchgit;
            inherit nodeEnv;
          }
        |]
      body =
        mkLets [ "nodeEnv" $= "import" @@ mkPath False (nodeEnvFile paths) @@ nodeEnvArgs ]
          $ "import" @@ mkPath False (packagesFile paths) @@ nodePackagesArgs
   in mkFunction params body
